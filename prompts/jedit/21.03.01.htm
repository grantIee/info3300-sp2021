<html><head>
<title>INFO 3300 - March 1</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v6.min.js"></script>
  
  <style>
  
    

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for March 1</h3>
  <p>
    Project 1 will be starting soon. Make sure you've completed the survey linked off of Canvas.
  </p>
  <p>
    Our dataset is sourced from Gapminder. We'll do a spinoff on one of <a href="https://youtu.be/jbkSRLYSojo">Hans Rosling's famous data presentations</a>.
  </p>
  <p>
    The <a href="https://github.com/d3/d3-fetch/tree/v2.0.0">d3.csv command</a> makes use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>. To learn more about why we use ".then", check out the documentation on <a href="https://developers.google.com/web/fundamentals/primers/promises">JS Promises</a>.
  </p>

  <h5>HTML for today:</h5>

  <svg id="scatterplot" height="400" width="400" style="margin-top:50px" >

  </svg>
  <div id="simpleLegend" class="legend"> </div>




  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">

    // --- 1
    // Let's begin by exploring commands for loading data
    
    
    
    
    
    
  
    // --- 2
    // Let's make a plain old scatterplot

    // 0. Find our SVG and get that ready
    //     We're going to use a new way of padding that makes axes easier
    
    
    
    
    // 1. Import some CSV data
    
    
      
    // 2. Check for data issues
    
    
    
    

    // 3. Let's build some scales
    
    
    
    
    // 4. Start plotting circles and see what happens
    


    
    // ---- 3
    // 5. Let's add some axes
    
    
    
    // 6A. We can manually make some gridlines
    //  It would work fine for HW3, but I don't recommend it once you start using axis labels
    
    // for (let i=0; i <= chartWidth; i = i + chartWidth/10) {
    //     scatter.append("line")
    //       .attr("x1",i)
    //       .attr("x2",i)
    //       .attr("y1",0)
    //       .attr("y2",chartHeight)
    //       .attr("stroke","lightgrey")
    //       .attr("stroke-width","1px");
    // }

    // 6B. Or we can use axes in a clever way
    
    

  
  


  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
