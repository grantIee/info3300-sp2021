<html><head>
<title>INFO 3300 - March 12</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v6.min.js"></script>
  <style>
  
    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Prompt for March 12</h3>
  <p>
    Make sure you get your milestone submission in on time! It will be graded on a completion-credit basis.
  </p>
  <p>
    The dataset on this page comes from an interesting <a href="https://www.kaggle.com/ucsandiego/carbon-dioxide">dataset on Kaggle</a> about atmospheric CO2 concentrations. I'm using it for demo purposes and can't speak to the veracity of the data.
  </p>
  <p>
    Today we're looking at d3 line plots. They also use a data join, but it's a bit trickier to implement. <a href="https://github.com/d3/d3-shape">Here</a> is some documentation on d3.shape, the library used for making line charts, and <a href="https://github.com/d3/d3-time-format">here</a> is the documentation on d3.time. Recall what we learned at the start of class on SVG <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths">paths</a>.
    <p>
      We will also learn some other handy shortcuts to make life easier. First, from here on we will employ <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">template strings</a> when making transforms and other string elements. We'll also use <a href="https://hacks.mozilla.org/2015/05/es6-in-depth-destructuring/">destructuring</a>, a technique for extracting variables directly from arrays and dictionaries without extra syntax. It's extremely powerful, but not completely supported across browsers. If in doubt, always check <a href="https://caniuse.com/?search=destructuring">CanIUse</a>.
    </p>
    <p>
      If you examine old examples of d3 mouseovers, you may see them using d3.mouse(). That changed in version 6. You can read <a href="https://observablehq.com/@d3/d3v6-migration-guide#pointer">this guide</a> to learn how to translate older v5 examples.
    </p>
  <p>
    If you're still confused about why we use translate and G tags in layout out charts, Mike Bostock has a <a href="https://bl.ocks.org/mbostock/3019563">handy page discussing chart margins</a>.
  </p>

  <h5>HTML for today:</h5>
  
  <svg id="lineplot" height="500" width="800" style="margin-top:50px" >
  </svg>
  


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">

  // Do the usual things to set up the chart area and incorporate margins


  // Import some CSV data
  // d3.csv("../datasets/co2.csv", d3.autoType)
  //   .then( (data) => {
  
  
  // Data cleanup?    
      
      
  // Now make the chart!
  
  
  
  
  
  
  
  
  // 6. Stretch goal - add a detailed mouseover
  
  // // Add marker lines, circles, and label to use in our mouseovers
  // let mouseGroup = chartArea.append("g");
  // let xMarker = mouseGroup.append("line")
  //   .attr("id","xMarker")
  //   .attr("fill","none")
  //   .attr("stroke","black")
  //   .attr("stroke-width",1)
  //   .attr("y1",0)
  //   .attr("y2",chartHeight)
  //   .attr("visibility","hidden");
  // 
  // let valueMarker = mouseGroup.append("circle")
  //   .attr("id","valueMarker")
  //   .attr("fill","none")
  //   .attr("stroke","black")
  //   .attr("stroke-width",2)
  //   .attr("r",10)
  //   .attr("visibility","hidden");
  // 
  // let label = mouseGroup.append("text")
  //   .attr("id","label")
  //   .attr("visibility","hidden");
  
  
  
  
  
  
  // });  
  
  
  
  
  
  
  </script>
  
  
  
  
  
  


  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
