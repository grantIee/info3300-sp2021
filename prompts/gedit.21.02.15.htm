<html>
<head>
  <meta charset="UTF-8">
  <title>INFO 3300 - February 15</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>

</head>
<body>
  <div class="container larger">
    <h3>Prompt for Monday, February 15</h3>
    <p>
      You can access these files from the <a href="https://github.com/jeffrz/info3300-spr2020">course Github repository</a>. The repository will be updated with notes shortly after class. While I encourage you to make use of a local copy of the repository so you can take notes, the version at this site will always be up-to-date and accessible. Execute a <tt>git pull</tt> in your repository directory to download new files. Prompt files won't change after posting, so feel free to modify them as you like. Here is an <a href="http://rogerdudler.github.io/git-guide/">informal guide to git</a>.
    </p>
    <p>
      To develop efficiently, have a local web server running. Python has a simple, built-in server. Use <tt>python -m http.server</tt> for python 3; use <tt>python -m SimpleHTTPServer 8000</tt> for python 2 (execute python in cmd for version number).
<<<<<<< HEAD
    </p>
=======
    </p>  
>>>>>>> 21.02.15 notes test
    <p>
        How does Javascript differ among popular web browsers? <a href="https://caniuse.com/">Can I Use</a> breaks down browser support and <a href="https://en.wikipedia.org/wiki/Usage_share_of_web_browsers">Browser Usage</a> on Wikipedia shows current market share. Count on your TAs using recent Chrome browsers to evaluate your assignments, but remember that much of the world is not. Even browser usage stats can be misleading if you are intending for your site to be used by members of the Global South.
      </p>
    <p>
      Let's review <a href="http://www.json.org">Javascript Object Notation</a>.
    </p>
<<<<<<< HEAD


=======
    
  
>>>>>>> 21.02.15 notes test
    <h5>HTML for today:</h5>

    <!-- Here's a standard HTML div element with an ID and a class -->
    <div id="d1" class="header" style="color: red;">
      Hello.
    </div>

    <!-- Here's an SVG canvas element. Note that in this file it looks like the <div> above. -->
    <svg height="200" width="200">
      <!-- Visual elements are represented by tags, which have attributes -->
      <rect x="50" y="30" r="30" width="40" height="50" id="rect1" style="fill: rgb(0, 200, 20); stroke-width: 5; stroke: black;"></rect>
      <rect x="100" y="30" r="30" width="40" height="25" id="rect2" style="fill: rgb(0, 20, 200); stroke-width: 5; stroke: black;"></rect>
    </svg>

    <!-- Here are two types of form inputs. -->
    <input id="entry" type="text" value="Hello?">
    <input id="slider" type="range" min="30" max="150" value="50">
<<<<<<< HEAD


=======
    
    
>>>>>>> 21.02.15 notes test
    <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>


    <!--- Code for today's class --->
    <script id="notes1">
<<<<<<< HEAD

      // * Let's play with scoping of variables

      // Var is a global
      var fruit = "orange";
      var veg = "carrot";
      // Constant can only be edited within its scope
      const legume = "lentil";
      if ( fruit === "orange") {
        // Fruit apple will only exist in this block
        let fruit = "apple";
        let color = "red";
        var veg = "leek";
        // try changing a constant -- this works but this is bad practice
        const legume = "bean";

        console.log("--in if");
        console.log(fruit);
        console.log(veg);
        console.log(color);
        console.log(legume);
      }
        console.log("--out if");
        console.log(fruit);
        // Veg will change because it will get overwritten
        console.log(veg);
        console.log(legume);
        // Color is not defined because let is no longer in scope outside of block
        //console.log(color);

        let test = "script tags. how do they work?";

        // Hoisting -> lifting something with a rope > hoists declaration but not initializations -> know that it exists but don't know what it will be.

        console.log(x); // we expect an error but instead we get undefined huh.
        // When you declare a variable its processed at the very start and knows its a possible variable
        var x = 5;
        console.log(x); // we will see a 5

        // Hoisting does not work for let
        //console.log(letx); -> returns error
        let letx = 5;
        console.log(letx);





        // Main takeaway: var is risky -> have side effects
        // Only use let
        // Only use var when you mean to
        // When you do want to use var you are probably wanting a const
        // Only use var when you have a very specific reason to do so






      // * Conditionals, functions and loops in c/java style and functional style.
      //   (to learn more about functions, check out http://ejohn.org/apps/learn/)

      // If statements:
      console.log("--If Statments");
      let y = 5;
      if ( y === 5) {
        console.log("equals 5");
      }
      else if ( y === 6 ) { console.log("equals 6"); }
      else {
        console.log("equals something else");
      }




      // Functions
      console.log("--Functions");
      // Hoisting lets you call functions before only when declaring functions in the way below.
      console.log(favoriteColor());
      function favoriteColor() {
        return "red";
      }
      console.log(favoriteColor);
      console.log(favoriteColor());


      // Creating Anonymous Function
      // Assigning a variable to a function because there's no name
      // This don't work because anonymous functions cannot be hoisted
      //console.log( favoriteNumber() );
      var favoriteNumber = function() { return 51; }
      console.log( favoriteNumber );
      console.log( favoriteNumber() );



      // function that takes a function as a parameter
      function display( func ) {
        // takes a function as param and prints the function's execution
        console.log( func() );
      }

      display ( favoriteColor );
      display ( favoriteNumber );


      // Example of lazy execution
      // function that returns a function
      function addOne( number ) {
        return function() { return number + 1; }
      }


      // SHORTCUTS
      //let bestAnimal = function() {return "dog"}
      //bestAnimal = () => {return "dog"}
      bestAnimal = () => "dog";
      let addNums = (num1, num2) => num1 + num2;
      let addTwo = number => number + 2;
      console.log(bestAnimal());

      // Loops
      console.log("-- LOOPS");
      let list = ["red", "green", "blue", "yellow"];
      for (let i = 0; i < list.length; i++) {
        console.log(list[i]);
      }

      for (let index in list) {
        console.log(index);
      }

      for (let obj of list) {
        console.log(obj);
      }

      list.forEach ( (item) => {
        console.log(item);
      } )

      // ALL OF THESE WORK ^




=======
    
      // * Let's play with scoping of variables
      
      
      
      
    
      // * Conditionals, functions and loops in c/java style and functional style.
      //   (to learn more about functions, check out http://ejohn.org/apps/learn/)
      
      // If statements:
      
      
            
      // Functions
      
      

      
      // Loops
      


      
      
>>>>>>> 21.02.15 notes test
      // * Let's talk JSON
      // JSON is used as a way to convey complex data over the web (e.g. getting data from an API elsewhere)
      // Key benefit over something like serialization is that it is standardized and very human-readable

      let obj = [{"name":"DDWA", "number":3300 },{"name": "Java", "number": 2110},{"name": "Python", "number": 1110}];
<<<<<<< HEAD

      let jsonObj = JSON.stringify(obj);
      console.log(jsonObj);
      console.log(typeof(jsonObj));
      console.log( JSON.parse(jsonObj) );


      // not the most efficient space wise but compress well
      // quite legible




      let badStrog = '{"list": ["commas,", "single_quo\'tes", "double_quo"tes", "@sÃ§i|"], "nestedObject": {"undefined": undefined, "defined": 3.1415926535}, "Infinity": Infinity, "NaN": NaN, "bool": true}'
      let badStr = '{"list": ["commas,", "single_quo\'tes", "double_quo\\"tes", "@sÃ§i|"], "nestedObject": {"undefined": null, "defined": 3.1415926535}, "bool": true}'
      console.log(JSON.parse(badStr));



      // bad json cuz of semicolons
      // can't fix with just double quotes
      var fib = '[1, 2, 3, 5, 7, 12]';
      console.log(JSON.parse(fib));



=======
      
      

      let badStr = '{"list": ["commas,", "single_quo\'tes", "double_quo"tes", "@sÃ§i|"], "nestedObject": {"undefined": undefined, "defined": 3.1415926535}, "Infinity": Infinity, "NaN": NaN, "bool": true}'
      //console.log(JSON.parse(badStr));
      
      
      
      var fib = '[1; 2; 3; 5; 7; 12]';
      //console.log(JSON.parse(fib));
    
>>>>>>> 21.02.15 notes test




<<<<<<< HEAD
=======
      
      
>>>>>>> 21.02.15 notes test
    </script>


    <script id="notes2">
<<<<<<< HEAD

      // How do two script tags interact with each other?
      // Scope works in between different script tags
      console.log(test);

    </script>





=======
    
      // How do two script tags interact with each other?
      // console.log(test);

    </script>
    
    
    
    
    
>>>>>>> 21.02.15 notes test

    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
    document.getElementById("display2").innerText = document.getElementById("notes2").innerText;
    hljs.initHighlightingOnLoad();
    </script>

  </div>
</body>
</html>
