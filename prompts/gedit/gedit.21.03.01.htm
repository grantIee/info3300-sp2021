<html><head>
<title>INFO 3300 - March 1</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>

  <script src="https://d3js.org/d3.v6.min.js"></script>

  <style>

  .gridlines line {
    stroke: #bbb
  }

  .gridlines .domain {
    stroke: none;
  }



  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for March 1</h3>
  <p>
    Project 1 will be starting soon. Make sure you've completed the survey linked off of Canvas.
  </p>
  <p>
    Our dataset is sourced from Gapminder. We'll do a spinoff on one of <a href="https://youtu.be/jbkSRLYSojo">Hans Rosling's famous data presentations</a>.
  </p>
  <p>
    The <a href="https://github.com/d3/d3-fetch/tree/v2.0.0">d3.csv command</a> makes use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>. To learn more about why we use ".then", check out the documentation on <a href="https://developers.google.com/web/fundamentals/primers/promises">JS Promises</a>.
  </p>

  <h5>HTML for today:</h5>

  <svg id="scatterplot" height="400" width="400" style="margin-top:50px" >

  </svg>
  <div id="simpleLegend" class="legend"> </div>

  <!-- Asynchronaity -> website freezes when data doesn't load on time, doing things in the background. -->




  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">

    // --- 1
    // Let's begin by exploring commands for loading data


    // Promise loads a lot quicker than the actual data arrives

    // Promises: needs to wait for data to load returns a promise object that data will arrive later on


   // console.log("_____ FIRST LINE OF CODE _____");
   // console.log(d3.json("../../../datasets/titanic.json") );
   // console.log("When will this print?");


   // var dataset;

   // d3.json("../../../datasets/titanic.json").then( data => {
   //   console.log(data);
   //   dataset = data;
   // } );

   // console.log("2 - When will this print?" );
   // // This won't be found
   // console.log(dataset);


   // d3.json("../../../datasets/titanic.json").then( data => { console.log("data", data); },
   //                                                 error => {console.log("error", error); } )





    // --- 2
    // Let's make a plain old scatterplot

    // 0. Find our SVG and get that ready
    //     We're going to use a new way of padding that makes axes easier

    const svg = d3.select("svg#scatterplot");
    const width = svg.attr("width");
    const height = svg.attr("height");
    // Module for controlling the margins
    const margins = {top: 10, right: 10, bottom: 50, left: 50};
    const chartWidth = width - margins.left - margins.right;
    const chartHeight = height - margins.top - margins.bottom;


    let scatter = svg.append("g").attr("transform", "translate(" + margins.left + "," + margins.right + ")");





    // 1. Import some CSV data
    d3.csv("../../../datasets/gapminder.csv").then( data => {

    data.forEach( (d, i) => {
      d['life'] = Number ( d['Life Expectancy' ])
      d['gdp'] = Number ( d['GDP/Person (PPP$)' ])
      // d['pop'] = Number ( d['Total Population' ])
      d['pop'] = Number ( d['Total Population' ].replace(/,/g,"") )
    } )


    // Filter Out bad points
    // Arrays have a filter function iterates through and filters through

    // True means to keep, False means to toss
    data = data.filter(  (d) => {  return d['gdp'] * d['life'] * d['pop'] != 0; })



    // 2. Check for data issues
    const lifeExtent = d3.extent(data, d => d['life'] );
    const gdpExtent = d3.extent(data, d => d['gdp'] );
    const popExtent = d3.extent(data, d => d['pop'] );

    const gdpScale = d3.scaleLinear().domain(gdpExtent).range([0, chartWidth]);
    const lifeScale = d3.scaleLinear().domain(lifeExtent).range([chartHeight, 0]);
    const popScale = d3.scaleLinear().domain(popExtent).range([5,10]);






    // 3. Let's build some scales
    data.forEach( (d, i) => {

      scatter.append("circle")
             .attr("cx", gdpScale(d['gdp'] ) )
             .attr("cy", lifeScale( d['life'] ) )
             .attr("r",  popScale( d['pop'] ) )
             .attr("fill",  "steelblue")
             .attr("opacity",  0.8)
             .attr("index", i);

    } );




    // 4. Start plotting circles and see what happens




    // ---- 3
    // 5. Let's add some axes

    // All it needs is a scale
    // returns a function -> taylors a custom function that pastes axis label into html where you want it
    let leftAxis = d3.axisLeft(lifeScale);
    svg.append("g")
       .attr("class", "y axis")
       .attr("transform", "translate(" + (margins.left - 10) + "," + (margins.top) + ")")
       .call(leftAxis);

    let bottomAxis = d3.axisBottom(gdpScale).ticks(6);
    svg.append("g")
       .attr("class", "x axis")
       .attr("transform", "translate(" + (margins.left) + "," + (margins.top + chartHeight + 10) + ")")
       .call(bottomAxis);


    // 6A. We can manually make some gridlines
    //  It would work fine for HW3, but I don't recommend it once you start using axis labels

    // for (let i=0; i <= chartWidth; i = i + chartWidth/10) {
    //     scatter.append("line")
    //       .attr("x1",i)
    //       .attr("x2",i)
    //       .attr("y1",0)
    //       .attr("y2",chartHeight)
    //       .attr("stroke","lightgrey")
    //       .attr("stroke-width","1px");
    // }

    // 6B. Or we can use axes in a clever way

    let leftGridLines = d3.axisLeft(lifeScale).tickFormat("").tickSize(-chartWidth-10);
    svg.append("g").lower()
       .attr("class", "y gridlines")
       .attr("transform", "translate(" + (margins.left - 10) + "," + (margins.top) + ")")
       .call(leftGridLines);

    let bottomGridLines = d3.axisBottom(gdpScale).ticks(6).tickFormat("").tickSize(-chartHeight-10);
    svg.append("g").lower()
       .attr("class", "x gridlines")
       .attr("transform", "translate(" + (margins.left) + "," + (margins.top + chartHeight + 10) + ")")
       .call(bottomGridLines);



} );




  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
