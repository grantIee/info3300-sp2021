<html><head>
<title>INFO 3300 - March 3</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v6.min.js"></script>
  <style>

    .legend span {
      margin-right: 10px;
    }

    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for March 3</h3>
  <p>
    Project 1 will be starting soon. Make sure you've completed the survey linked off of Canvas.
  </p>
  <p>
    Our dataset is sourced from <a href="https://www.kaggle.com/bidyutchanda/top-10-highest-grossing-films-19752018">Kaggle</a>. It contains the top ten highest grossing movies for each year from 1975 to 2018. We'll graph the movies to see if certain genres perform better or are more popular in certain times.
  </p>
  <p>
    Some other useful links: <a href="https://observablehq.com/@d3/d3-autotype">d3 autotype</a> | <a href="https://observablehq.com/@d3/continuous-scales#scale_symlog">different d3 scales</a> | <a href="https://observablehq.com/@d3/d3-scaleordinal">d3 ordinal scales</a> | <a href="https://github.com/d3/d3-format">d3 tick formatting</a>

  <h5>HTML for today:</h5>

  <svg id="scatterplot" height="400" width="600" style="margin-top:50px" >
    <text id="label" x="590" y="5"  text-anchor="end" alignment-baseline="hanging"></text>


  </svg>

  <div id="scatterLegend" class="legend"> </div>




  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">

  // ---- 1
  // 0. Let's make a fancy scatterplot
  const svg = d3.select("svg#scatterplot");

  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = {top: 10, right: 10, bottom: 50, left: 50};

  const chartWidth = width - margin.left - margin.right;
  const chartHeight = height - margin.top - margin.bottom;

  // This time we'll use another layer to make sure things stay ordered properly
  //  Remember that SVG draws from the top down, layering things on top of one another
  let annotations = svg.append("g").attr("id","annotations");
                  // No translate here since our annotations may be outside of the chart area

  let chartArea = svg.append("g").attr("id","points")
                  .attr("transform","translate("+margin.left+","+margin.top+")");

  // Make sure the text label is on the top using raise()
  d3.select("#label").raise();


  // Import some CSV data
  d3.csv("../../../datasets/blockbusters.csv", d3.autoType)
    .then( (data) => {

  // ------- START OF PROMISE ------

  // 0. Check for data issues
  data.forEach( d => {
    d['worldwide_gross'] = Number( d['worldwide_gross'].replace(/,/g,"").replace(/\$/g,"") );
  })

  console.log(data);

  // 1. Building the scales we need
  const yearExtent = d3.extent(data, d => d['year']);
  const yearScale = d3.scaleLinear().domain(yearExtent).range([0, chartWidth]);
  const grossExtent = d3.extent(data, d => d['worldwide_gross']);
  const grossScale = d3.scaleLog().domain(grossExtent).range([chartHeight, 0]);
  const imdbExtent = d3.extent(data, d => d['imdb_rating']);
  const imdbScale = d3.scaleLinear().domain(imdbExtent).range([3,8]);

  // 1a. How do we color by genre?
  let genreScale = d3.scaleOrdinal( d3.schemeCategory10 );



  // 2. Draw some axes, make them fancy through using tickFormat

  let leftAxis = d3.axisLeft(grossScale).tickFormat( d3.format("$.0s"));
  let leftGridlines = d3.axisLeft(grossScale).tickFormat("").tickSize(-chartWidth-10);

  annotations.append("g").attr("class", "y axis")
             .attr("transform", "translate(" + (margin.left-10) + "," + (margin.top) + ")")
             .call(leftAxis)

  annotations.append("g").attr("class", "y gridlines")
             .attr("transform", "translate(" + (margin.left-10) + "," + (margin.top) + ")")
             .call(leftGridlines)

  let bottomAxis = d3.axisBottom(yearScale).tickFormat(d3.format("~f"));
  let bottomGridlines = d3.axisBottom(yearScale).tickFormat("").tickSize(-chartHeight-10);

  annotations.append("g").attr("class", "x axis")
             .attr("transform", "translate(" + (margin.left-10) + "," + (margin.top + chartHeight+10) + ")")
             .call(bottomAxis)

  annotations.append("g").attr("class", "x gridlines")
             .attr("transform", "translate(" + (margin.left-10) + "," + (margin.top + chartHeight + 10) + ")")
             .call(bottomGridlines)

  // 3. Start plotting circles and see what happens
  data.forEach( (d, i) => {
    let circle = chartArea.append("circle")
                          .attr("cx", yearScale( d['year']) )
                          .attr("cy", grossScale( d['worldwide_gross']))
                          .attr("r", imdbScale( d['imdb_rating']) )
                          .attr("fill", genreScale( d['Main_Genre']) )
                          .attr("index", i)
                          .attr("opacity", 0.8)
                          .attr("label", d['title'])
                          .attr("genre", d['Main_Genre']);






    // --- 2
    // 5. Add some mouseovers
    circle.on("mouseover", function() {
      // lets you use this which is what is moused over

      d3.select(this).raise()
                     .transition().duration(200)
                     .attr("stroke", "black")
                     .attr("r", imdbScale( d['imdb_rating']) + 2 )
                     .attr("stroke-width", 4)
                     .attr("fill", lighten( genreScale(d['Main_Genre'])));
      d3.select("#label").text( d['title']);
    })

    circle.on("mouseout", function() {

      d3.select(this).attr("stroke-width", 0)
                     .transition().duration(200)
                     .attr("r", imdbScale( d['imdb_rating']) )
                     .attr("fill", genreScale(d['Main_Genre']));

      d3.select("#label").text("");
    })



  });


  // --- 3
  // 0. Check out the results of genreScale now that we've colored a bunch of points
  console.log( genreScale.domain());


  // 1. Make a cheapo legend for the chart that's clickable
  genreScale.domain().forEach( (d, i) => {

    d3.select("#scatterLegend")
      .append("span")
      .text(d)
      .style("color", genreScale(d))
      .on("click", function() {
        d3.selectAll("#scatterplot circle").each( function() {

          // magic this
          let element = d3.select(this);
          let genre = element.attr("genre");
          if (genre === d) {
            // show the circle
            element.attr("visibility", "")

          }
          else {
            // hide the circle
            element.attr("visibility", "hidden")
          }

        })


      });



    });

    d3.select("#scatterLegend")
      .append("span")
      .text("clear")
      .style("color", "black")
      .on("click", function() {
        d3.selectAll("#scatterplot circle").each( function() {

          // magic this
          let element = d3.select(this);
          let genre = element.attr("genre");
          element.attr("visibility","")

        })


      });






  // How do we add a "clear" button to this to clear the filters?
  //   Try it out by yourself! (hint, you need to do something different with .each() )





  // ------- END OF PROMISE ------

},
(error) => { console.log(error) } );






  // HELPER FUNCTION
  //  lighten a color a little bit using d3 color functions
  function lighten(color) {

      let hclColor = d3.hcl(color);
      let luma = Math.min(130, hclColor.l + 30);
      return d3.rgb( d3.hcl( hclColor.h, hclColor.c, luma ) );

  }

  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
